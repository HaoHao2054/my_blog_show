{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/05/11/hello-world/",
            "url": "http://example.com/2025/05/11/hello-world/",
            "title": "Hello World",
            "date_published": "2025-05-10T17:10:36.494Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"language-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2025/05/10/%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/",
            "url": "http://example.com/2025/05/10/%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/",
            "title": "文章测试",
            "date_published": "2025-05-10T15:58:47.000Z",
            "content_html": "<h2 id=\"使用的工具\"><a href=\"#使用的工具\" class=\"headerlink\" title=\"使用的工具\"></a>使用的工具</h2><ul>\n<li>vscode \t\t\t      编辑器</li>\n<li>cmake  \t \t            工程构建工具</li>\n<li>ninja     \t\t             工程编译工具</li>\n<li>openOCD  \t\t\t烧录工具</li>\n<li>arm-gnu-toolchain          交叉编译器</li>\n<li>clangd                               代码提示</li>\n</ul>\n<h1 id=\"一、安装需要的工具链\"><a href=\"#一、安装需要的工具链\" class=\"headerlink\" title=\"一、安装需要的工具链\"></a>一、安装需要的工具链</h1><h2 id=\"1、下载\"><a href=\"#1、下载\" class=\"headerlink\" title=\"1、下载\"></a>1、下载</h2><h2 id=\"2、添加到系统环境变量\"><a href=\"#2、添加到系统环境变量\" class=\"headerlink\" title=\"2、添加到系统环境变量\"></a>2、添加到系统环境变量</h2><p>系统环境变量path</p>\n<ul>\n<li>D:\\toochain\\ninja</li>\n<li>D:\\toochain\\arm-gnu-toolchain-14.2\\bin</li>\n<li>D:\\toochain\\clang+llvm-19.1.7\\bin</li>\n<li>D:\\toochain\\OpenOCD-20240916\\bin</li>\n</ul>\n<p>新建系统环境变量OPENOCD_SCRIPTS</p>\n<ul>\n<li>D:\\toochain\\OpenOCD-20240916\\share\\openocd\\scripts</li>\n</ul>\n<h1 id=\"二、构建工程\"><a href=\"#二、构建工程\" class=\"headerlink\" title=\"二、构建工程\"></a>二、构建工程</h1><h2 id=\"1、直接用命令行\"><a href=\"#1、直接用命令行\" class=\"headerlink\" title=\"1、直接用命令行\"></a>1、直接用命令行</h2><p>在工程根目录</p>\n<pre><code class=\"language-bash\">cmake -G Ninja -B build\n</code></pre>\n<p>指定Ninja为构建工具，生成到build文件夹中</p>\n<p>编译</p>\n<pre><code class=\"language-bash\">cmake --build build --target all\n</code></pre>\n<p>或者进入到build目录下，执行</p>\n<pre><code class=\"language-bash\">ninja\n</code></pre>\n<h2 id=\"2、设置task\"><a href=\"#2、设置task\" class=\"headerlink\" title=\"2、设置task\"></a>2、设置task</h2><p>创建<code>.vscode/tasks.json</code>文件</p>\n<p>创建三个任务：</p>\n<ul>\n<li>CMake configure：用cmake生成ninja、compile_commands.json等文件</li>\n<li>Build：编译</li>\n<li>Clean：删除build和.cache文件夹</li>\n</ul>\n<pre><code class=\"language-json\">&#123;\n    &quot;version&quot;: &quot;2.0.0&quot;,\n    &quot;tasks&quot;: [\n        &#123;\n            &quot;label&quot;: &quot;CMake configure&quot;,\n            &quot;type&quot;: &quot;shell&quot;,\n            &quot;command&quot;: &quot;cmake&quot;,\n            &quot;args&quot;: [\n                &quot;-G&quot;, &quot;Ninja&quot;,\n                &quot;-B&quot;, &quot;build&quot;\n            ],\n            &quot;group&quot;: &#123;\n                &quot;kind&quot;: &quot;build&quot;,\n                &quot;isDefault&quot;: true\n            &#125;,\n            &quot;problemMatcher&quot;: [&quot;$gcc&quot;],\n            &quot;detail&quot;: &quot;Generated task for CMake configure&quot;\n        &#125;,\n        &#123;\n            &quot;label&quot;: &quot;Build&quot;,\n            &quot;type&quot;: &quot;shell&quot;,\n            &quot;command&quot;: &quot;cmake&quot;,\n            &quot;args&quot;: [\n                &quot;--build&quot;, &quot;build&quot;,\n                &quot;--target&quot;, &quot;all&quot;\n            ],\n            &quot;group&quot;: &#123;\n                &quot;kind&quot;: &quot;build&quot;,\n                &quot;isDefault&quot;: false\n            &#125;,\n            &quot;problemMatcher&quot;: [&quot;$gcc&quot;],\n            &quot;detail&quot;: &quot;Generated task for building the project&quot;\n        &#125;,\n        &#123;\n            &quot;label&quot;: &quot;Clean&quot;,\n            &quot;type&quot;: &quot;shell&quot;,\n            &quot;command&quot;: &quot;cmd&quot;,\n            &quot;args&quot;: [\n                &quot;/c&quot;,\n                &quot;rmdir /s /q build &amp;&amp; rmdir /s /q .cache&quot;\n            ],\n            &quot;group&quot;: &#123;\n                &quot;kind&quot;: &quot;build&quot;,\n                &quot;isDefault&quot;: false\n            &#125;,\n            &quot;problemMatcher&quot;: [],\n            &quot;detail&quot;: &quot;Generated task for cleaning the build and cache directories&quot;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<p>如果是Linux系统，Clean任务需要修改为：</p>\n<pre><code class=\"language-json\">\t\t&#123;\n            &quot;label&quot;: &quot;Clean&quot;,\n            &quot;type&quot;: &quot;shell&quot;,\n            &quot;command&quot;: &quot;sh&quot;,\n            &quot;args&quot;: [\n                &quot;-c&quot;,\n                &quot;rm -rf build .cache&quot;\n            ],\n            &quot;group&quot;: &#123;\n                &quot;kind&quot;: &quot;build&quot;,\n                &quot;isDefault&quot;: false\n            &#125;,\n            &quot;problemMatcher&quot;: [],\n            &quot;detail&quot;: &quot;Generated task for cleaning the build and cache directories&quot;\n        &#125;\n</code></pre>\n<h2 id=\"3、设置快捷按钮\"><a href=\"#3、设置快捷按钮\" class=\"headerlink\" title=\"3、设置快捷按钮\"></a>3、设置快捷按钮</h2><p>使用vscode插件<strong>Task Buttons</strong></p>\n<p>在<code>.vscode/settings.json</code>中自定义按钮</p>\n<p>对应tasks.json中定义的三个任务</p>\n<pre><code class=\"language-json\">&#123;\n    &quot;clangd.arguments&quot;: [\n        &quot;--compile-commands-dir=$&#123;workspaceFolder&#125;/build&quot;\n    ],\n\n    &quot;VsCodeTaskButtons.showCounter&quot;: true,\n    &quot;VsCodeTaskButtons.tasks&quot;: [\n        &#123;\n            &quot;label&quot;: &quot;$(wrench) Configure&quot;,\n            &quot;task&quot;: &quot;CMake configure&quot;,\n            &quot;tooltip&quot;: &quot;Configure the project with CMake&quot;\n        &#125;,\n        &#123;\n            &quot;label&quot;: &quot;$(tools) Build&quot;,\n            &quot;task&quot;: &quot;Build&quot;,\n            &quot;tooltip&quot;: &quot;Build the project&quot;\n        &#125;,\n        &#123;\n            &quot;label&quot;: &quot;$(trash) Clean&quot;,\n            &quot;task&quot;: &quot;Clean&quot;,\n            &quot;tooltip&quot;: &quot;Build the project&quot;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<h1 id=\"三、修改芯片ram、flash、堆栈\"><a href=\"#三、修改芯片ram、flash、堆栈\" class=\"headerlink\" title=\"三、修改芯片ram、flash、堆栈\"></a>三、修改芯片ram、flash、堆栈</h1><p>在工程根目录中的<code>STM32H750XBHx_FLASH.ld</code>链接脚本中进行修改</p>\n<h3 id=\"1、ram、flash大小修改\"><a href=\"#1、ram、flash大小修改\" class=\"headerlink\" title=\"1、ram、flash大小修改\"></a>1、ram、flash大小修改</h3><pre><code class=\"language-cmake\">/* Specify the memory areas */\nMEMORY\n&#123;\nDTCMRAM (xrw)      : ORIGIN = 0x20000000, LENGTH = 128K\nRAM (xrw)      : ORIGIN = 0x24000000, LENGTH = 512K\nRAM_D2 (xrw)      : ORIGIN = 0x30000000, LENGTH = 288K\nRAM_D3 (xrw)      : ORIGIN = 0x38000000, LENGTH = 64K\nITCMRAM (xrw)      : ORIGIN = 0x00000000, LENGTH = 64K\nFLASH (rx)      : ORIGIN = 0x8000000, LENGTH = 128K\n&#125;\n</code></pre>\n<p>   比如我要用外部存储w25q256，修改flash的地址和长度</p>\n<p>   根据图中的配置来修改：</p>\n<p><img loading=\"lazy\" src=\"https://markdownforyuanhao.oss-cn-hangzhou.aliyuncs.com/img1/202505092247882.png\" alt=\"flash_1\"></p>\n<pre><code class=\"language-cmake\">/* Specify the memory areas */\nMEMORY\n&#123;\nDTCMRAM (xrw)      : ORIGIN = 0x20000000, LENGTH = 128K\nRAM (xrw)      : ORIGIN = 0x24000000, LENGTH = 512K\nRAM_D2 (xrw)      : ORIGIN = 0x30000000, LENGTH = 288K\nRAM_D3 (xrw)      : ORIGIN = 0x38000000, LENGTH = 64K\nITCMRAM (xrw)      : ORIGIN = 0x00000000, LENGTH = 64K\nFLASH (rx)      : ORIGIN = 0x90000000, LENGTH = 32M\n&#125;\n</code></pre>\n<h3 id=\"2、修改堆栈大小\"><a href=\"#2、修改堆栈大小\" class=\"headerlink\" title=\"2、修改堆栈大小\"></a>2、修改堆栈大小</h3><pre><code class=\"language-c\">/* Generate a link error if heap and stack don&#39;t fit into RAM */\n_Min_Heap_Size = 0x200;      \t/* required amount of heap  */\n_Min_Stack_Size = 0x400; \t\t/* required amount of stack */\n</code></pre>\n<h1 id=\"四、烧录\"><a href=\"#四、烧录\" class=\"headerlink\" title=\"四、烧录\"></a>四、烧录</h1><h2 id=\"1、使用STM32CubeProgrammer烧录\"><a href=\"#1、使用STM32CubeProgrammer烧录\" class=\"headerlink\" title=\"1、使用STM32CubeProgrammer烧录\"></a>1、使用STM32CubeProgrammer烧录</h2><p>参考网上的使用指南，比如<a href=\"https://www.armbbs.cn/forum.php?mod=viewthread&tid=100658\">安富莱外部下载算法</a></p>\n<h2 id=\"2、使用openOCD进行烧录\"><a href=\"#2、使用openOCD进行烧录\" class=\"headerlink\" title=\"2、使用openOCD进行烧录\"></a>2、使用openOCD进行烧录</h2><p>参考<a href=\"../../%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/%E7%94%A8openocd%E8%BF%9B%E8%A1%8C%E7%83%A7%E5%BD%95%E5%92%8C%E8%B0%83%E8%AF%95.md\">用openocd进行烧录和调试</a></p>\n<h1 id=\"五、其他配置\"><a href=\"#五、其他配置\" class=\"headerlink\" title=\"五、其他配置\"></a>五、其他配置</h1><h3 id=\"1、添加ninja输出高亮\"><a href=\"#1、添加ninja输出高亮\" class=\"headerlink\" title=\"1、添加ninja输出高亮\"></a>1、添加ninja输出高亮</h3><p>   在顶层CMakeLists中添加</p>\n<pre><code class=\"language-cmake\"># 启用 Ninja 颜色支持\n add_compile_options(-fdiagnostics-color=always)\n</code></pre>\n<h3 id=\"2、设置编译出的文件为hex文件\"><a href=\"#2、设置编译出的文件为hex文件\" class=\"headerlink\" title=\"2、设置编译出的文件为hex文件\"></a>2、设置编译出的文件为hex文件</h3><p>   在顶层cmakelists文件末尾添加：</p>\n<pre><code class=\"language-cmake\"># 添加生成 hex 文件的步骤\nadd_custom_command(TARGET $&#123;CMAKE_PROJECT_NAME&#125; POST_BUILD\n    COMMAND $&#123;CMAKE_OBJCOPY&#125; -O ihex $&#123;CMAKE_BINARY_DIR&#125;/$&#123;CMAKE_PROJECT_NAME&#125;.elf $&#123;CMAKE_BINARY_DIR&#125;/$&#123;CMAKE_PROJECT_NAME&#125;.hex\n    COMMENT &quot;Generating hex file from elf&quot;\n)\n</code></pre>\n<h3 id=\"3、设置为从外部flash中启动\"><a href=\"#3、设置为从外部flash中启动\" class=\"headerlink\" title=\"3、设置为从外部flash中启动\"></a>3、<strong>设置为从外部flash中启动</strong></h3><p>   修改中断向量表偏移地址</p>\n<p>   在<code>./Core/Src/system_stm32h7xx.c</code>的SystemInit函数末尾添加</p>\n<pre><code class=\"language-c\">void SystemInit (void)\n&#123;\n......\n#endif /* USER_VECT_TAB_ADDRESS */\n\n#endif /*DUAL_CORE &amp;&amp; CORE_CM4*/\n  /*偏移中断向量表*/\n  SCB-&gt;VTOR = 0x90000000;\n&#125;\n</code></pre>\n<h3 id=\"4、设置格式化工具\"><a href=\"#4、设置格式化工具\" class=\"headerlink\" title=\"4、设置格式化工具\"></a>4、<strong>设置格式化工具</strong></h3><p>   在工程根目录中创建<code>.clang-format</code>文件</p>\n<p>   将格式化代码的形式设置为微软的格式：</p>\n<pre><code class=\"language-yaml\">BasedOnStyle: Microsoft\nAccessModifierOffset: -4\nAlignConsecutiveMacros: true\nAlignTrailingComments: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: false\nBreakBeforeBraces: Allman\nColumnLimit: 0\n</code></pre>\n<h3 id=\"5、clangd无法识别标准c库\"><a href=\"#5、clangd无法识别标准c库\" class=\"headerlink\" title=\"5、clangd无法识别标准c库\"></a>5、<strong>clangd无法识别标准c库</strong></h3><h3 id=\"6、启用微库microLIB\"><a href=\"#6、启用微库microLIB\" class=\"headerlink\" title=\"6、启用微库microLIB\"></a>6、<strong>启用微库microLIB</strong></h3><p>   比如重定向<code>printf()</code>标准输出函数到串口</p>\n<p>   在顶层CMakeLists中添加</p>\n<pre><code class=\"language-cmake\"># 启用microLIB\nset(CMAKE_C_FLAGS &quot;$&#123;CMAKE_C_FLAGS&#125; -specs=nosys.specs&quot;)\nset(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -specs=nosys.specs&quot;)\n</code></pre>\n<h3 id=\"7、重定向printf函数\"><a href=\"#7、重定向printf函数\" class=\"headerlink\" title=\"7、重定向printf函数\"></a>7、<strong>重定向printf函数</strong></h3><p>   前提：启用微库microLIB</p>\n<p>   在usart.c中添加</p>\n<pre><code class=\"language-c\">......\n    \n/* 包含头文件 */\n#include &lt;stdarg.h&gt;\n#include &quot;stdio.h&quot;\n    \n    \n/* 用户函数 */\n/* USER CODE BEGIN 1 */\n__IO int _write(int file, char *ptr, int len)\n&#123;\n    (void)file;\n\n    HAL_UART_Transmit(&amp;huart1,(uint8_t *)ptr,len, 200);        //串口发送字符数组（字符串）\n\n    return len;\n&#125;\n/* USER CODE END 1 */\n\n......\n</code></pre>\n<p>   将这两个头文件放在<code>main.h</code>中，这样所有文件都可以用<code>printf()</code>函数</p>\n<p>   <strong>注意</strong>：不同交叉编译器使用的microLIB不一样，重定向printf的方法不一样，上述方法适用于使用<code>arm-none-eabi-gcc</code>的工程，比如cmake或者stm32cubeide</p>\n<h3 id=\"8、添加自定义的源文件和头文件路径\"><a href=\"#8、添加自定义的源文件和头文件路径\" class=\"headerlink\" title=\"8、添加自定义的源文件和头文件路径\"></a>8、<strong>添加自定义的源文件和头文件路径</strong></h3><p>示例：</p>\n<p>用户源文件在<code>./Drivers/user/Src</code>中，遍历该路径下所有源文件</p>\n<p>用户头文件在<code>./Drivers/user/Inc</code>中，添加该头文件路径</p>\n<pre><code class=\"language-cmake\">......\n# Link directories setup\ntarget_link_directories($&#123;CMAKE_PROJECT_NAME&#125; PRIVATE\n    # Add user defined library search paths\n)\n\n# 从./Drivers/user/Src遍历的添加源文件，添加到USER_SOURCES变量中\nfile(GLOB USER_SOURCES ./Drivers/user/Src/*.c)\n\n# Add sources to executable\ntarget_sources($&#123;CMAKE_PROJECT_NAME&#125; PRIVATE\n    # Add user sources here\n    $&#123;USER_SOURCES&#125;\n)\n\n# 添加头文件路径\n# Add include paths\ntarget_include_directories($&#123;CMAKE_PROJECT_NAME&#125; PRIVATE\n    # Add user defined include paths\n    ./Drivers/user/Inc\n)\n......\n</code></pre>\n<ol>\n<li><p>先用<code>file</code>命令遍历式的把指定文件夹中的所有源文件都添加到USER_SOURCE变量中，再用已有的<code>target_sources</code>添加到可执行文件</p>\n</li>\n<li><p>使用已有的<code>target_include_directories</code>添加头文件路径</p>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2025/05/10/%E6%B5%8B%E8%AF%95/",
            "url": "http://example.com/2025/05/10/%E6%B5%8B%E8%AF%95/",
            "title": "测试",
            "date_published": "2025-05-10T14:34:15.000Z",
            "content_html": "",
            "tags": []
        }
    ]
}